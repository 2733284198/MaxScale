/*
 * Copyright (c) 2019 MariaDB Corporation Ab
 *
 * Use of this software is governed by the Business Source License included
 * in the LICENSE.TXT file and at www.mariadb.com/bsl11.
 *
 * Change Date: 2026-01-01
 *
 * On the date above, in accordance with the Business Source License, use
 * of this software will be governed by version 2 or later of the General
 * Public License.
 */

#include <string>
#include <maxbase/alloc.h>
#include <maxscale/buffer.hh>
#include <maxscale/protocol/mariadb/mysql.hh>
#include <maxscale/protocol/mariadb/protocol_classes.hh>
#include <maxscale/authenticator2.hh>
#include <maxbase/logger.hh>

using std::string;

static const uint8_t resultset1[] =
{
    /* BEGIN;*/
    0x29, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
    0x40, 0x00, 0x00, 0x00, 0x20, 0x05, 0x09, 0x08,
    0x54, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
    0x04, 0x13, 0x12, 0x53, 0x54, 0x41, 0x52, 0x54,
    0x20, 0x54, 0x52, 0x41, 0x4E, 0x53, 0x41, 0x43,
    0x54, 0x49, 0x4F, 0x4E, 0x3B,
    /* COMMIT;*/
    0x17, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
    0x40, 0x00, 0x00, 0x00, 0x0E, 0x05, 0x09, 0x08,
    0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
    0x04, 0x01, 0x00,
    /* START TRANSACTION;*/
    0x29, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
    0x40, 0x00, 0x00, 0x00, 0x20, 0x05, 0x09, 0x08,
    0x54, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
    0x04, 0x13, 0x12, 0x53, 0x54, 0x41, 0x52, 0x54,
    0x20, 0x54, 0x52, 0x41, 0x4E, 0x53, 0x41, 0x43,
    0x54, 0x49, 0x4F, 0x4E, 0x3B,
    /* START TRANSACTION READ ONLY;*/
    0x28, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
    0x60, 0x00, 0x00, 0x00, 0x1F, 0x04, 0x1D, 0x1C,
    0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x54, 0x52,
    0x41, 0x4E, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4F,
    0x4E, 0x20, 0x52, 0x45, 0x41, 0x44, 0x20, 0x4F,
    0x4E, 0x4C, 0x59, 0x3B,
    /* COMMIT;*/
    0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00,
    /* SET AUTOCOMMIT=0;*/
    0x1D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x14, 0x00, 0x0F, 0x0A,
    0x61, 0x75, 0x74, 0x6F, 0x63, 0x6F, 0x6D, 0x6D,
    0x69, 0x74, 0x03, 0x4F, 0x46, 0x46, 0x02, 0x01,
    0x31,
    /* INSERT INTO t1 VALUES(1);*/
    0x14, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
    0x40, 0x00, 0x00, 0x00, 0x0B, 0x05, 0x09, 0x08,
    0x49, 0x5F, 0x5F, 0x5F, 0x57, 0x5F, 0x5F, 0x5F,
    /* COMMIT;*/
    0x14, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x0B, 0x05, 0x09, 0x08,
    0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F
};

#define PACKET_HDR_LEN 4

#define PACKET_1_IDX 0
#define PACKET_1_LEN (PACKET_HDR_LEN + 0x29)
#define PACKET_2_IDX (PACKET_1_IDX + PACKET_1_LEN)
#define PACKET_2_LEN (PACKET_HDR_LEN + 0x17)
#define PACKET_3_IDX (PACKET_2_IDX + PACKET_2_LEN)
#define PACKET_3_LEN (PACKET_HDR_LEN + 0x29)
#define PACKET_4_IDX (PACKET_3_IDX + PACKET_3_LEN)
#define PACKET_4_LEN (PACKET_HDR_LEN + 0x28)
#define PACKET_5_IDX (PACKET_4_IDX + PACKET_4_LEN)
#define PACKET_5_LEN (PACKET_HDR_LEN + 0x07)
#define PACKET_6_IDX (PACKET_5_IDX + PACKET_5_LEN)
#define PACKET_6_LEN (PACKET_HDR_LEN + 0x1D)
#define PACKET_7_IDX (PACKET_6_IDX + PACKET_6_LEN)
#define PACKET_7_LEN (PACKET_HDR_LEN + 0x14)
#define PACKET_8_IDX (PACKET_7_IDX + PACKET_7_LEN)
#define PACKET_8_LEN (PACKET_HDR_LEN + 0x14)

/* multi statments;*/
static const uint8_t resultset2[] =
{
    /**
     *  set autocommit=0;
     *  create table t1(id int);
     *  insert into t1 select seq from seq_0_to_20;
     *  select '' from t1;
     **/
    0x1D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x14, 0x00, 0x0F, 0x0A,
    0x61, 0x75, 0x74, 0x6F, 0x63, 0x6F, 0x6D, 0x6D,
    0x69, 0x74, 0x03, 0x4F, 0x46, 0x46, 0x02, 0x01,
    0x31, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x01,
    0x00, 0x15, 0x00, 0x21, 0x40, 0x00, 0x00, 0x27,
    0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x73, 0x3A,
    0x20, 0x32, 0x31, 0x20, 0x20, 0x44, 0x75, 0x70,
    0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x3A,
    0x20, 0x30, 0x20, 0x20, 0x57, 0x61, 0x72, 0x6E,
    0x69, 0x6E, 0x67, 0x73, 0x3A, 0x20, 0x30, 0x0B,
    0x05, 0x09, 0x08, 0x49, 0x5F, 0x52, 0x5F, 0x57,
    0x5F, 0x5F, 0x5F, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x16, 0x00, 0x00, 0x02, 0x03, 0x64, 0x65, 0x66,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x21, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFD, 0x01, 0x00, 0x27,
    0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0xFE, 0x00,
    0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
    0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00,
    0x06, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 0x01,
    0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x09,
    0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00,
    0x00, 0x0B, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x00,
    0x01, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x00,
    0x0E, 0x00, 0x01, 0x00, 0x00, 0x0F, 0x00, 0x01,
    0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x11,
    0x00, 0x01, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00,
    0x00, 0x13, 0x00, 0x01, 0x00, 0x00, 0x14, 0x00,
    0x01, 0x00, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00,
    0x16, 0x00, 0x01, 0x00, 0x00, 0x17, 0x00, 0x01,
    0x00, 0x00, 0x18, 0x00, 0x05, 0x00, 0x00, 0x19,
    0xFE, 0x00, 0x00, 0x21, 0x40
};

/**
 * SET AUTOCOMMIT=0;
 * CREATE TABLE t1(a VARCHAR(20), b INT, c INT, d INT);
 * INSERT INTO t1 VALUES ('', 100, 200, 300);
 * SELECT * FROM t1;
 **/
static const uint8_t resultset3[] =
{
    0x28, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x40, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x0F, 0x0A,
    0x61, 0x75, 0x74, 0x6F, 0x63, 0x6F, 0x6D, 0x6D,
    0x69, 0x74, 0x03, 0x4F, 0x46, 0x46, 0x02, 0x01,
    0x31, 0x05, 0x09, 0x08, 0x49, 0x5F, 0x52, 0x5F,
    0x5F, 0x5F, 0x53, 0x5F, 0x1D, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x0F, 0x0A, 0x61, 0x75, 0x74, 0x6F,
    0x63, 0x6F, 0x6D, 0x6D, 0x69, 0x74, 0x03, 0x4F,
    0x46, 0x46, 0x02, 0x01, 0x31, 0x07, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
    0x40, 0x00, 0x00, 0x00, 0x0B, 0x05, 0x09, 0x08,
    0x49, 0x5F, 0x5F, 0x5F, 0x57, 0x5F, 0x5F, 0x5F,
    0x01, 0x00, 0x00, 0x01, 0x04, 0x20, 0x00, 0x00,
    0x02, 0x03, 0x64, 0x65, 0x66, 0x04, 0x74, 0x65,
    0x73, 0x74, 0x02, 0x74, 0x31, 0x02, 0x74, 0x31,
    0x01, 0x61, 0x01, 0x61, 0x0C, 0x21, 0x00, 0x3C,
    0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x03, 0x03, 0x64, 0x65,
    0x66, 0x04, 0x74, 0x65, 0x73, 0x74, 0x02, 0x74,
    0x31, 0x02, 0x74, 0x31, 0x01, 0x62, 0x01, 0x62,
    0x0C, 0x3F, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
    0x04, 0x03, 0x64, 0x65, 0x66, 0x04, 0x74, 0x65,
    0x73, 0x74, 0x02, 0x74, 0x31, 0x02, 0x74, 0x31,
    0x01, 0x63, 0x01, 0x63, 0x0C, 0x3F, 0x00, 0x0B,
    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x05, 0x03, 0x64, 0x65,
    0x66, 0x04, 0x74, 0x65, 0x73, 0x74, 0x02, 0x74,
    0x31, 0x02, 0x74, 0x31, 0x01, 0x64, 0x01, 0x64,
    0x0C, 0x3F, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
    0x06, 0xFE, 0x00, 0x00, 0x21, 0x00, 0x05, 0x00,
    0x00, 0x07, 0xFE, 0x00, 0x00, 0x21, 0x00
};

std::unique_ptr<MariaDBBackendConnection> generate_protocol()
{
    // Define an empty authenticator to use when generating protocol.
    class DummyAuthenticator : public mxs::BackendAuthenticator
    {
    public:
        bool extract(DCB* client, GWBUF* buffer) override
        {
            return true;
        }

        bool ssl_capable(DCB* client) override
        {
            return false;
        }

        // Carry out the authentication.
        int authenticate(DCB* client) override
        {
            return 0;
        }
    };

    std::unique_ptr<DummyAuthenticator> auth;
    auto proto = MariaDBBackendConnection::create_test_protocol(std::move(auth));
    proto->server_capabilities |= GW_MYSQL_CAPABILITIES_SESSION_TRACK;
    return proto;
}

std::unique_ptr<MariaDBBackendConnection> proto = generate_protocol();
const string trx_state = "trx_state";

int check_property(GWBUF* buffer, const string& property_name, const string& expected)
{
    int rval = 1;
    auto prop_namez = property_name.c_str();
    auto expected_valz = expected.c_str();
    char* property_val = gwbuf_get_property(buffer, property_name.c_str());

    if (expected.empty())
    {
        // Empty "expected" means null.
        if (property_val)
        {
            printf("Property '%s' had value '%s' when none was expected.\n", prop_namez, property_val);
        }
        else
        {
            rval = 0;
        }
    }
    else if (!property_val)
    {
        printf("Property '%s' did not have a value when '%s' was expected.\n", prop_namez, expected_valz);
    }
    else if (property_val != expected)
    {
        printf("Property '%s' had value '%s' when '%s' was expected.\n",
               prop_namez, property_val, expected_valz);
    }
    else
    {
        rval = 0;
    }
    return rval;
}

int test_item(const uint8_t* resultset, int packet_size, int data_offset,
              const string& prop_name, const string& expected)
{
    GWBUF* buffer = gwbuf_alloc_and_load(packet_size, resultset + data_offset);
    proto->mxs_mysql_get_session_track_info(buffer);
    int rval = check_property(buffer, prop_name, expected);
    gwbuf_free(buffer);
    return rval;
}

/* functional test , test packet by packet */
int test1()
{
    int rval = 0;
    fprintf(stderr, "test_session_track : Functional tests.\n");

    auto test_rs1 = [](int packet_size, int data_offset, const string& prop_name, const string& expected)
    {
        return test_item(resultset1, packet_size, data_offset, prop_name, expected);
    };

    // BEGIN
    rval += test_rs1(PACKET_1_LEN, PACKET_1_IDX, trx_state, "T_______");

    // COMMIT
    rval += test_rs1(PACKET_2_LEN, PACKET_2_IDX, trx_state, "________");

    // START TRANSACTION
    rval += test_rs1(PACKET_3_LEN, PACKET_3_IDX, trx_state, "T_______");

    // START TRANSACTION READ ONLY
    rval += test_rs1(PACKET_4_LEN, PACKET_4_IDX, "trx_characteristics", "START TRANSACTION READ ONLY;");

    // COMMIT
    rval += test_rs1(PACKET_5_LEN, PACKET_5_IDX, "trx_characteristics", "");
    rval += test_rs1(PACKET_5_LEN, PACKET_5_IDX, trx_state, "");

    // SET AUTOCOMMIT=0;
    rval += test_rs1(PACKET_6_LEN, PACKET_6_IDX, "autocommit", "OFF");

    // INSERT INTO t1 VALUES(1);
    rval += test_rs1(PACKET_7_LEN, PACKET_7_IDX, trx_state, "I___W___");

    // COMMIT
    rval += test_rs1(PACKET_8_LEN, PACKET_8_IDX, trx_state, "________");
    return rval;
}

/* multi results combine in one buffer, test for check boundary handle properly */
int test2()
{
    fprintf(stderr, "test_session_track: multi results test\n");
    return test_item(resultset2, sizeof(resultset2), 0, trx_state, "I_R_W___");
}

int test3()
{
    fprintf(stderr, "test_session_track: protocol state test\n");
    return test_item(resultset3, sizeof(resultset3), 0, trx_state, "I_R_W___");
}

int main(int argc, char** argv)
{
    int rval = 0;
    test1();
    rval += test2();
    // rval += test3(); // test3 was already disabled
    return rval;
}
